Index: app/api/(auth)/auth/[...nextauth]/options.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport bcrypt from 'bcryptjs';\nimport dbConnect from '../../../../../lib/connectDb';\nimport { UserModel } from '../../../../../model/User';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      id: 'credentials',\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      async authorize(credentials: any): Promise<any> {\n        await dbConnect();\n        try {\n          const user = await UserModel.findOne({\n            $or: [\n              { email: credentials.identifier },\n              { username: credentials.identifier },\n            ],\n          });\n          if (!user) {\n            throw new Error('No user found with this email');\n          }\n          if (!user.isVerified) {\n            throw new Error('Please verify your account before logging in');\n          }\n          const isPasswordCorrect = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n          if (isPasswordCorrect) {\n            return {\n              _id: user._id?.toString(),\n              username: user.username,\n              email: user.email,\n              isVerified: user.isVerified,\n              isTeacher: user.isTeacher, \n            };\n          } else {\n            throw new Error('Incorrect password');\n          }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (err: any) {\n          throw new Error(err);\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token._id = user._id; // User ID\n        token.username = user.username;\n        token.isVerified = user.isVerified;\n        token.isTeacher = user.isTeacher; \n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user._id = token._id;\n        session.user.username = token.username;\n        session.user.isVerified = token.isVerified;\n        session.user.isTeacher = token.isTeacher; // Add isTeacher to session\n      }\n      return session;\n    },\n  },\n  session: {\n    strategy: 'jwt',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  pages: {\n    signIn: '/sign-in',\n  },\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/(auth)/auth/[...nextauth]/options.ts b/app/api/(auth)/auth/[...nextauth]/options.ts
--- a/app/api/(auth)/auth/[...nextauth]/options.ts	(revision 37aee64d502c7f3ab7d8d7608889fc4253fabd9e)
+++ b/app/api/(auth)/auth/[...nextauth]/options.ts	(date 1735493084230)
@@ -39,7 +39,9 @@
               username: user.username,
               email: user.email,
               isVerified: user.isVerified,
-              isTeacher: user.isTeacher, 
+              isTeacher: user.isTeacher,
+              isAdmin: user.isAdmin,
+              isStudent: user.isStudent
             };
           } else {
             throw new Error('Incorrect password');
@@ -57,7 +59,9 @@
         token._id = user._id; // User ID
         token.username = user.username;
         token.isVerified = user.isVerified;
-        token.isTeacher = user.isTeacher; 
+        token.isTeacher = user.isTeacher;
+        token.isAdmin = user.isAdmin;
+        token.isStudent = user.isStudent;
       }
       return token;
     },
@@ -66,7 +70,9 @@
         session.user._id = token._id;
         session.user.username = token.username;
         session.user.isVerified = token.isVerified;
-        session.user.isTeacher = token.isTeacher; // Add isTeacher to session
+        session.user.isTeacher = token.isTeacher;
+        session.user.isAdmin = token.isAdmin;
+        session.user.isStudent = token.isStudent;
       }
       return session;
     },
Index: app/api/admin/user/teacher/accept/[...userId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import dbConnect from \"../../../../../../../lib/connectDb\";\nimport {getServerSession, User} from \"next-auth\";\nimport {authOptions} from \"../../../../../(auth)/auth/[...nextauth]/options\";\nimport {NextResponse} from \"next/server\";\nimport mongoose from \"mongoose\";\nimport {RequestModel, UserModel} from \"../../../../../../../model/User\";\n\nexport async function PATCH(req: Request, { params }: { params: { userId: string[] } }) {\n  try {\n    await dbConnect();\n\n    const session = await getServerSession(authOptions);\n    const user: User = session?.user as User;\n\n    if (!session || !user) {\n      return NextResponse.json({error: 'Unauthorized. User must be logged in.'}, {status: 401});\n    }\n\n    if (!user.isAdmin) {\n      return NextResponse.json(\n        { error: 'User is not admin' },\n        { status: 401 }\n      );\n    }\n\n    const {userId} = await params;\n\n    if (!userId.length) {\n      return NextResponse.json(\n        {error: 'No user id found.'},\n        {status: 400}\n      );\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(userId[0])) {\n      return NextResponse.json(\n        {error: 'Invalid user id'},\n        {status: 400}\n      );\n    }\n\n    const userObjectId = new mongoose.Types.ObjectId(userId[0]);\n\n    const deleteRequest = await RequestModel.deleteOne({user_id: userObjectId});\n\n    if (!deleteRequest) {\n      return NextResponse.json(\n        {error: 'Failed to delete request'},\n        {status: 500}\n      )\n    }\n\n    const userTeacher: User|null = await UserModel.findByIdAndUpdate(userObjectId, {reqTeacher: false, isTeacher: true});\n\n    if (!userTeacher) {\n      return NextResponse.json(\n        {error: \"failed to found user\"},\n        {status: 404}\n      )\n    }\n\n    return NextResponse.json({status: 200});\n  } catch (error) {\n    console.log(error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/admin/user/teacher/accept/[...userId]/route.ts b/app/api/admin/user/teacher/accept/[...userId]/route.ts
--- a/app/api/admin/user/teacher/accept/[...userId]/route.ts	(revision 37aee64d502c7f3ab7d8d7608889fc4253fabd9e)
+++ b/app/api/admin/user/teacher/accept/[...userId]/route.ts	(date 1735493084226)
@@ -3,7 +3,8 @@
 import {authOptions} from "../../../../../(auth)/auth/[...nextauth]/options";
 import {NextResponse} from "next/server";
 import mongoose from "mongoose";
-import {RequestModel, UserModel} from "../../../../../../../model/User";
+import {RequestModel, TeacherModel, UserModel} from "../../../../../../../model/User";
+import {v4 as uuidv4} from "uuid";
 
 export async function PATCH(req: Request, { params }: { params: { userId: string[] } }) {
   try {
@@ -41,6 +42,20 @@
 
     const userObjectId = new mongoose.Types.ObjectId(userId[0]);
 
+    const teacherId = `T-${uuidv4()}`;
+    const teacher = await TeacherModel.create({
+      user_id: userObjectId,
+      teacher_id: teacherId,
+      subjectTeaching: []
+    })
+
+    if (!teacher) {
+      return NextResponse.json(
+        {error: 'Failed to create teacher'},
+        {status: 500}
+      )
+    }
+
     const deleteRequest = await RequestModel.deleteOne({user_id: userObjectId});
 
     if (!deleteRequest) {
@@ -50,7 +65,7 @@
       )
     }
 
-    const userTeacher: User|null = await UserModel.findByIdAndUpdate(userObjectId, {reqTeacher: false, isTeacher: true});
+    const userTeacher = await UserModel.findByIdAndUpdate(userObjectId, {reqTeacher: false, isTeacher: true});
 
     if (!userTeacher) {
       return NextResponse.json(
Index: model/User.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { strict } from \"assert\";\nimport mongoose, { Schema, Document, Model } from \"mongoose\";\nimport { v4 as uuidv4 } from 'uuid'\n\nexport interface User extends Document {\n    username: string;\n    email: string;\n    password: string;\n    verifyCode: string;\n    verifyCodeExpiry: Date;\n    isVerified: boolean;\n    isStudent:boolean\n    isTeacher: boolean;\n    isAdmin: boolean;\n    reqTeacher: boolean;\n    reqAdmin: boolean;\n}\n\nconst UserSchema: Schema<User> = new Schema({\n    username: {\n        type: String,\n        required: [true, 'username is required'],\n        unique: true,\n    },\n    email: {\n        type: String,\n        required: [true, 'email is required'],\n        unique: true,\n        match: [/^[a-zA-Z0-9._%+-]+@pec\\.edu\\.in$/, 'please use college email id'],\n    },\n    password: {\n        type: String,\n        required: [true, \"Password is required\"],\n    },\n    verifyCode: {\n        type: String,\n        required: [true, 'Verification Code is required'],\n    },\n    verifyCodeExpiry: {\n        type: Date,\n        required: [true, 'Expiry is required'],\n    },\n    isVerified: {\n        type: Boolean,\n        default: false,\n    },\n    isStudent: {\n        type: Boolean,\n        default: false,\n    },\n    isTeacher: {\n        type: Boolean,\n        default: false, // Default to false, only true if admin updates the field\n    },\n    isAdmin: {\n        type: Boolean,\n        default: false,\n    },\n    reqTeacher: {\n        type: Boolean,\n        default: false,\n    },\n    reqAdmin: {\n        type: Boolean,\n        default: false,\n    }\n});\n\nUserSchema.post(\"save\", async function (this: User) {\n    if (this.isStudent) {\n        \n        try {\n            const existingStudent = await StudentModel.findOne({ user_id: this._id });\n            if (existingStudent) {\n                console.log(`Student with user_id ${this._id} already exists.`);\n                return; \n            }\n            const studentId = `S-${uuidv4()}`;\n            const newStudent = new StudentModel({\n                user_id: this._id,\n                email:this.email,\n                name: this.username,\n                student_id: studentId,\n                semester: 1,\n                branch: \"Unknown\",\n                sid_verification: false,\n                enrolledSubjectId: [],\n                teacherSubjectMap: {},\n                attendanceSubjectMap: {},\n                clubsPartOf: [],\n                interestedEvents: [],\n                clubsHeadOf: [],\n                profile: \"\",\n                friends: []\n            });\n\n            await newStudent.save();\n        } catch (error) {\n            console.error(\"Error creating student:\", error);\n        }\n    }\n\n    if (this.isTeacher) {\n        try {\n            const teacherId = `T-${uuidv4()}`;\n            const newTeacher = new TeacherModel({\n                user_id: this._id,\n                teacher_id: teacherId,\n                admin_verification: false,\n                subjectTeaching: [],\n                // StudentsMarksMap: {},\n            });\n\n            await newTeacher.save();\n        } catch (error) {\n            console.error(\"Error creating teacher:\", error);\n        }\n    }\n\n    if (this.reqTeacher) {\n        try {\n            const alreadyRequested = await RequestModel.findOne({user_id: this._id})\n\n            if (alreadyRequested) {\n                console.log(\"already requested for teacher\")\n                return;\n            }\n\n            const request = new RequestModel({\n                user_id: this._id,\n                for_teacher: true,\n                for_admin: false,\n            })\n\n            await request.save();\n        } catch (error) {\n            console.error(\"Error making request for teacher:\", error);\n        }\n    }\n\n    if (this.reqAdmin) {\n        try {\n            const alreadyRequested = await RequestModel.findOne({user_id: this._id})\n\n            if (alreadyRequested) {\n                console.log(\"already requested for admin\")\n                return;\n            }\n\n            const request = new RequestModel({\n                user_id: this._id,\n                for_teacher: false,\n                for_admin: true,\n            })\n\n            await request.save();\n        } catch (error) {\n            console.error(\"Error making request for admin:\", error);\n        }\n    }\n});\n\n\nexport interface Student extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    email?:string;\n    name?:string;\n    student_id?: string;\n    semester: number;\n    phoneNumber?: number;\n    branch: string;\n    sid_verification: boolean;\n    enrolledSubjectId: string[];\n    teacherSubjectMap: Record<string, mongoose.Schema.Types.ObjectId>;\n    attendanceSubjectMap: Record<number, string>;\n    clubsPartOf: mongoose.Schema.Types.ObjectId[];\n    interestedEvents: mongoose.Schema.Types.ObjectId[];\n    clubsHeadOf: mongoose.Schema.Types.ObjectId[];\n    profile?: string;\n    friends: mongoose.Schema.Types.ObjectId[];\n}\n\n\nconst StudentSchema: Schema<Student> = new Schema({\n    user_id: {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n        required: true,\n    },\n    email:{\n        type:String,required:false\n    },\n    name: { type: String, required: true },\n    student_id: { type: String, unique: true },\n    semester: { type: Number, required: true },\n    phoneNumber: { type: Number },\n    branch: { type: String, required: true },\n    sid_verification: { type: Boolean, default: false },\n    enrolledSubjectId: [{ type: String }],\n    teacherSubjectMap: {\n        type: Map,\n        of: Schema.Types.ObjectId,\n    },\n    attendanceSubjectMap: {\n        type: Map,\n        of: String,\n    },\n    clubsPartOf: [{ type: Schema.Types.ObjectId, ref: \"Club\" }],\n    interestedEvents: [{ type: Schema.Types.ObjectId, ref: \"Event\" }],\n    clubsHeadOf: [{ type: Schema.Types.ObjectId, ref: \"Club\" }],\n    profile: {\n        type: String,\n        required: false,\n    },\n    friends: [{ type: Schema.Types.ObjectId, ref: \"Student\" }],\n});\n\n\nexport interface Teacher extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    teacher_id: string;\n    admin_verification: boolean;\n    subjectTeaching: string[];\n}\n\nconst TeacherSchema: Schema<Teacher> = new Schema({\n    user_id: {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n        required: true,\n    },\n    teacher_id: { type: String, required: true, unique: true },\n    admin_verification: { type: Boolean, default: false },\n    subjectTeaching: [{ type: String }],\n});\n\nexport interface Club extends Document {\n    clubName: string;\n    clubLogo?: string;\n    clubIdSecs: string[];\n    clubMembers: string[];\n    clubEvents: mongoose.Schema.Types.ObjectId[];\n}\n\nconst ClubSchema: Schema<Club> = new Schema({\n    clubName: { type: String, required: true, unique: true },\n    clubLogo: { type: String },\n    clubIdSecs: [{ type: String, ref: \"Student\" }],\n    clubMembers: [{ type: String, ref: \"Student\" }],\n    clubEvents: [{ type: Schema.Types.ObjectId, ref: \"Event\" }],\n});\nexport interface Event extends Document {\n    eventHostedBy: mongoose.Schema.Types.ObjectId;\n    eventVenue: string;\n    eventTime: Date;\n    interestedMembersArr: mongoose.Schema.Types.ObjectId[];\n    eventAttachments?: string[];\n    poster: string;\n    heading: string;\n    description: string;\n    tags: string[];\n}\n\nconst EventSchema: Schema<Event> = new Schema({\n    eventHostedBy: {\n        type: Schema.Types.ObjectId,\n        ref:\"Club\"\n    },\n    eventVenue: { type: String, required: true },\n    eventTime: { type: Date, required: true },\n    interestedMembersArr: [{ type: Schema.Types.ObjectId, ref: \"Student\" }],\n    eventAttachments: [{ type: String }],\n    poster: { type: String, required: true },\n    heading: { type: String, required: true },\n    description: { type: String, required: true },\n    tags: [{ type: String }],\n});\n\n\n\nexport interface Subject extends Document {\n  subjectId: string;\n  allMarks: {\n    examType: string;\n    studentMarks: {\n      student_id: string;\n      marks: number;\n    }[];\n  }[];\n}\n\nconst SubjectSchema: Schema<Subject> = new Schema({\n    subjectId: { type: String, required: true },\n    allMarks: {\n      type: [\n        {\n          examType: { type: String, required: true },\n          studentMarks: [\n            {\n              student_id: { type: String, required: true },\n              marks: { type: Number, required: true },\n            },\n          ],\n        },\n      ],\n      default: [],\n    },\n  });\n\n\n\nexport interface Attendance extends Document {\n    subjectId: string;\n    totalClasses: number;\n    dateStudentMap: {\n        date: Date;\n        studentPresent: mongoose.Schema.Types.ObjectId[];\n    }[];\n    code: number;\n}\n\nconst AttendanceSchema: Schema<Attendance> = new Schema({\n    subjectId: { type: String, required: true },\n    totalClasses: { type: Number, required: true },\n    dateStudentMap: [{\n        date: { type: Date, required: true },\n        studentPresent: [{ type: Schema.Types.ObjectId, ref: \"Student\" }],\n    }],\n    code: { type: Number},\n})\n\n\n\nexport interface Request extends Document {\n    user_id: mongoose.Schema.Types.ObjectId;\n    for_teacher: boolean;\n    for_admin: boolean;\n}\n\nconst RequestSchema: Schema<Request> = new Schema({\n    user_id: {type: Schema.Types.ObjectId, ref: \"User\" },\n    for_teacher: {type: \"boolean\", default: false},\n    for_admin: {type: \"boolean\", default: false},\n})\n\n\n\nexport interface FriendRequest extends Document {\n    from: mongoose.Schema.Types.ObjectId;\n    to: mongoose.Schema.Types.ObjectId;\n}\n\nconst FriendRequestSchema: Schema<FriendRequest> = new Schema({\n    from: {type: Schema.Types.ObjectId, ref: \"Student\" },\n    to: {type: Schema.Types.ObjectId, ref: \"Student\" },\n})\n\ninterface Eventai {\n    title: string;\n    description: string;\n}\n\ninterface Markai {\n    subject: string;\n    marks: string;\n}\n\ninterface Generalai {\n    title: string;\n    description: string;\n}\n\ninterface Info {\n    events?: Eventai[];\n    marks?: Markai[];\n    general?: Generalai[];\n}\n\nexport interface AiChatBot extends Document {\n    Info: Info;\n}\n\nconst EventSchemaAI = new Schema<Eventai>({\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n});\n\nconst MarkSchemaAI = new Schema<Markai>({\n    subject: { type: String, required: true },\n    marks: { type: String, required: true },\n});\n\nconst GeneralSchemaAI = new Schema<Generalai>({\n    title: { type: String, required: true },\n    description: { type: String, required: true },\n});\n\nconst AiChatBotSchema: Schema<AiChatBot> = new Schema({\n    Info: {\n        events: [EventSchemaAI],\n        marks: [MarkSchemaAI],\n        general: [GeneralSchemaAI],\n    }},\n    { collection: 'aiChatBot' }\n);\n\nconst aiChatBotModel: Model<AiChatBot> =\n    mongoose.models.aiChatBot || mongoose.model<AiChatBot>(\"aiChatBot\", AiChatBotSchema);\n\nconst UserModel: Model<User> =\n    mongoose.models.User || mongoose.model<User>(\"User\", UserSchema);\n\nconst StudentModel: Model<Student> =\n    mongoose.models.Student || mongoose.model<Student>(\"Student\", StudentSchema);\n\nconst TeacherModel: Model<Teacher> =\n    mongoose.models.Teacher || mongoose.model<Teacher>(\"Teacher\", TeacherSchema);\n\nconst ClubModel: Model<Club> =\n    mongoose.models.Club|| mongoose.model<Club>(\"Club\", ClubSchema);\n\nconst EventModel: Model<Event> =\n    mongoose.models.Event || mongoose.model<Event>(\"Event\", EventSchema);\n\nconst SubjectModel : Model<Subject>=\n    mongoose.models.Subject || mongoose.model<Subject>(\"Subject\",SubjectSchema);\n\nconst AttendanceModel: Model<Attendance> =\n    mongoose.models.Attendance || mongoose.model<Attendance>(\"Attendance\", AttendanceSchema);\n\nconst RequestModel: Model<Request> =\n    mongoose.models.Request || mongoose.model<Request>(\"Request\", RequestSchema);\n\nconst FriendRequestModel: Model<FriendRequest> =\n    mongoose.models.FriendRequest || mongoose.model<FriendRequest>(\"FriendRequest\", FriendRequestSchema);\n\nexport {\n    UserModel,\n    StudentModel,\n    TeacherModel,\n    ClubModel,\n    EventModel,\n    SubjectModel,\n    AttendanceModel,\n    RequestModel,\n    FriendRequestModel,\n    aiChatBotModel\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/User.ts b/model/User.ts
--- a/model/User.ts	(revision 37aee64d502c7f3ab7d8d7608889fc4253fabd9e)
+++ b/model/User.ts	(date 1735493084221)
@@ -100,23 +100,6 @@
         }
     }
 
-    if (this.isTeacher) {
-        try {
-            const teacherId = `T-${uuidv4()}`;
-            const newTeacher = new TeacherModel({
-                user_id: this._id,
-                teacher_id: teacherId,
-                admin_verification: false,
-                subjectTeaching: [],
-                // StudentsMarksMap: {},
-            });
-
-            await newTeacher.save();
-        } catch (error) {
-            console.error("Error creating teacher:", error);
-        }
-    }
-
     if (this.reqTeacher) {
         try {
             const alreadyRequested = await RequestModel.findOne({user_id: this._id})
@@ -219,8 +202,10 @@
 export interface Teacher extends Document {
     user_id: mongoose.Schema.Types.ObjectId;
     teacher_id: string;
-    admin_verification: boolean;
-    subjectTeaching: string[];
+    subjectTeaching: {
+        subject_code: string;
+        subject_name: string;
+    }[];
 }
 
 const TeacherSchema: Schema<Teacher> = new Schema({
@@ -230,7 +215,6 @@
         required: true,
     },
     teacher_id: { type: String, required: true, unique: true },
-    admin_verification: { type: Boolean, default: false },
     subjectTeaching: [{ type: String }],
 });
 
Index: types/next-auth.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'next-auth';\nimport { DefaultSession } from 'next-auth';\n\ndeclare module 'next-auth' {\n  interface User {\n    _id?: string;\n    isVerified: boolean;\n    isTeacher: boolean; \n    username: string;\n    isAdmin: boolean;\n  }\n\n  interface Session {\n    user: {\n      _id\n      isVerified: boolean;\n      isTeacher: boolean; \n      username: string;\n      isAdmin: boolean;\n      isStudent:boolean;\n    } & DefaultSession['user'];\n  }\n}\n\ndeclare module 'next-auth/jwt' {\n  interface JWT {\n    _id?: string;\n    isVerified: boolean;\n    isTeacher: boolean; \n    username: string;\n    isAdmin: boolean;\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/types/next-auth.d.ts b/types/next-auth.d.ts
--- a/types/next-auth.d.ts	(revision 37aee64d502c7f3ab7d8d7608889fc4253fabd9e)
+++ b/types/next-auth.d.ts	(date 1735493084208)
@@ -8,11 +8,12 @@
     isTeacher: boolean; 
     username: string;
     isAdmin: boolean;
+    isStudent: boolean;
   }
 
   interface Session {
     user: {
-      _id
+      _id?: string;
       isVerified: boolean;
       isTeacher: boolean; 
       username: string;
@@ -29,5 +30,6 @@
     isTeacher: boolean; 
     username: string;
     isAdmin: boolean;
+    isStudent: boolean;
   }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"3d45d623-ee8a-421e-8d0d-07f88c3fd10c\" name=\"Changes\" comment=\"fixup! recovered files\">\n      <change afterPath=\"$PROJECT_DIR$/app/admin/user/layout.tsx\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/app/admin/user/make-teacher/page.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_22_24,_5_27 PM_[Changes]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_22_24__5_27PM__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/(auth)/sign-up/page.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/(auth)/sign-up/page.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/admin/clubs/page.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/admin/clubs/page.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/admin/user/make-admin/page.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/admin/user/make-admin/page.tsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/api/(auth)/sign-up/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/api/(auth)/sign-up/route.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/api/admin/user/admin/accept/[...userId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/api/admin/user/admin/accept/[...userId]/route.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/api/admin/user/admin/reject/[...userId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/api/admin/user/admin/reject/[...userId]/route.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/api/admin/user/teacher/accept/[...userId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/api/admin/user/teacher/accept/[...userId]/route.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/api/admin/user/teacher/reject/[...userId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/api/admin/user/teacher/reject/[...userId]/route.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/schemas/signUpSchema.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/schemas/signUpSchema.ts\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"TypeScript JSX File\" />\n        <option value=\"TypeScript File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"css-testing\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;VaibhavVerma27&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/VaibhavVerma27/Ideathon.git&quot;,\n    &quot;accountId&quot;: &quot;2d85c29d-bd34-4650-83c7-ed5abaf2838e&quot;\n  }\n}</component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2pwcVN5jNvv3r7ErnbxxbDHxjE8\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/vaibhav-verma/WebstormProjects/ideathon/app/api/admin/user&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;ts.external.directory.path&quot;: &quot;/home/vaibhav-verma/WebstormProjects/ideathon/node_modules/typescript/lib&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/app/api/admin/user\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/app/api/admin/user\" />\n      <recent name=\"$PROJECT_DIR$/app/api/user/friends/remove-friend/[...studentId]\" />\n      <recent name=\"$PROJECT_DIR$/app/api/user/friends/reject-friend/[...studentId]\" />\n      <recent name=\"$PROJECT_DIR$/app/api/user/friends/accept-friend/[...studentId]\" />\n      <recent name=\"$PROJECT_DIR$/app/api/admin/clubs/[...clubId]\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-WS-243.22562.222\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"3d45d623-ee8a-421e-8d0d-07f88c3fd10c\" name=\"Changes\" comment=\"\" />\n      <created>1733680600234</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1733680600234</updated>\n      <workItem from=\"1733680601320\" duration=\"285000\" />\n      <workItem from=\"1733724675594\" duration=\"611000\" />\n      <workItem from=\"1733822080765\" duration=\"1111000\" />\n      <workItem from=\"1733835011657\" duration=\"6379000\" />\n      <workItem from=\"1733847978381\" duration=\"5516000\" />\n      <workItem from=\"1733894701134\" duration=\"9865000\" />\n      <workItem from=\"1733925499497\" duration=\"1606000\" />\n      <workItem from=\"1733928369051\" duration=\"251000\" />\n      <workItem from=\"1733928630064\" duration=\"4368000\" />\n      <workItem from=\"1733980473805\" duration=\"1457000\" />\n      <workItem from=\"1734070775491\" duration=\"813000\" />\n      <workItem from=\"1734085817459\" duration=\"30000\" />\n      <workItem from=\"1734183280596\" duration=\"5230000\" />\n      <workItem from=\"1734189002399\" duration=\"3292000\" />\n      <workItem from=\"1734192305926\" duration=\"2303000\" />\n      <workItem from=\"1734194762220\" duration=\"86000\" />\n      <workItem from=\"1734199075722\" duration=\"1951000\" />\n      <workItem from=\"1734202864084\" duration=\"690000\" />\n      <workItem from=\"1734243660946\" duration=\"163000\" />\n      <workItem from=\"1734247462466\" duration=\"601000\" />\n      <workItem from=\"1734274484596\" duration=\"221000\" />\n      <workItem from=\"1734285025230\" duration=\"756000\" />\n      <workItem from=\"1734342119399\" duration=\"12152000\" />\n      <workItem from=\"1734415130463\" duration=\"154000\" />\n      <workItem from=\"1734451510425\" duration=\"1022000\" />\n      <workItem from=\"1734515159954\" duration=\"1302000\" />\n      <workItem from=\"1734587553335\" duration=\"2223000\" />\n      <workItem from=\"1734622604490\" duration=\"6450000\" />\n      <workItem from=\"1734672636682\" duration=\"3862000\" />\n      <workItem from=\"1734697995805\" duration=\"4210000\" />\n      <workItem from=\"1734709695437\" duration=\"1288000\" />\n      <workItem from=\"1734719253317\" duration=\"6275000\" />\n      <workItem from=\"1734766424331\" duration=\"15352000\" />\n      <workItem from=\"1734859762039\" duration=\"16109000\" />\n      <workItem from=\"1734888157235\" duration=\"1752000\" />\n      <workItem from=\"1734936981008\" duration=\"20081000\" />\n      <workItem from=\"1735026512179\" duration=\"9324000\" />\n      <workItem from=\"1735048088338\" duration=\"5248000\" />\n      <workItem from=\"1735060156138\" duration=\"2618000\" />\n      <workItem from=\"1735064720771\" duration=\"656000\" />\n      <workItem from=\"1735106418820\" duration=\"148000\" />\n      <workItem from=\"1735141420059\" duration=\"11523000\" />\n      <workItem from=\"1735194562583\" duration=\"6771000\" />\n      <workItem from=\"1735224189800\" duration=\"10335000\" />\n      <workItem from=\"1735280126356\" duration=\"8507000\" />\n      <workItem from=\"1735312870855\" duration=\"4460000\" />\n      <workItem from=\"1735327415197\" duration=\"5118000\" />\n      <workItem from=\"1735368401501\" duration=\"8272000\" />\n      <workItem from=\"1735394000412\" duration=\"72000\" />\n      <workItem from=\"1735395983128\" duration=\"5172000\" />\n      <workItem from=\"1735411913079\" duration=\"275000\" />\n      <workItem from=\"1735412199180\" duration=\"4549000\" />\n      <workItem from=\"1735456473928\" duration=\"2596000\" />\n      <workItem from=\"1735473072434\" duration=\"168000\" />\n      <workItem from=\"1735476153656\" duration=\"2666000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n    <option name=\"exactExcludedFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/next.config.mjs\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"fixup! recovered files\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixup! recovered files\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 37aee64d502c7f3ab7d8d7608889fc4253fabd9e)
+++ b/.idea/workspace.xml	(date 1735493087891)
@@ -5,20 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3d45d623-ee8a-421e-8d0d-07f88c3fd10c" name="Changes" comment="fixup! recovered files">
-      <change afterPath="$PROJECT_DIR$/app/admin/user/layout.tsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/admin/user/make-teacher/page.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_22_24,_5_27 PM_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_22_24__5_27PM__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/(auth)/sign-up/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/app/(auth)/sign-up/page.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/admin/clubs/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/app/admin/clubs/page.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/admin/user/make-admin/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/app/admin/user/make-admin/page.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/api/(auth)/sign-up/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/(auth)/sign-up/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/api/admin/user/admin/accept/[...userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/user/admin/accept/[...userId]/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/api/admin/user/admin/reject/[...userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/user/admin/reject/[...userId]/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/api/(auth)/auth/[...nextauth]/options.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/(auth)/auth/[...nextauth]/options.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/api/admin/user/teacher/accept/[...userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/user/teacher/accept/[...userId]/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/api/admin/user/teacher/reject/[...userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/app/api/admin/user/teacher/reject/[...userId]/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/schemas/signUpSchema.ts" beforeDir="false" afterPath="$PROJECT_DIR$/schemas/signUpSchema.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model/User.ts" beforeDir="false" afterPath="$PROJECT_DIR$/model/User.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/types/next-auth.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/types/next-auth.d.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -161,7 +152,9 @@
       <workItem from="1735412199180" duration="4549000" />
       <workItem from="1735456473928" duration="2596000" />
       <workItem from="1735473072434" duration="168000" />
-      <workItem from="1735476153656" duration="2666000" />
+      <workItem from="1735476153656" duration="3525000" />
+      <workItem from="1735481667323" duration="351000" />
+      <workItem from="1735490418912" duration="2609000" />
     </task>
     <servers />
   </component>
